# This workflow will build and deploy a site to another repo when a tag is pushed

name: Deploy site to Staging

on:
  push:
    branches: ['main']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
# Needed for nx-set-shas when run on the main branch
permissions:
  actions: read
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: 'staging'
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
      - name: Configure GitHub Pages
        uses: actions/configure-pages@v4
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-
      - name: Install dependencies
        run: npm ci
      - name: Set SHAs
        uses: nrwl/nx-set-shas@v3
      # This line is needed for nx format:check to check the correct files
      - name: Build Tailwind
        run: npx nx build tailwind
      - name: Check formatting
        run: npx nx-cloud record -- nx format:check
      - name: Build
        run: |
          npx nx affected -t lint,test --parallel=3
          npx nx affected -t build --parallel=3 --skip-nx-cache

      - name: Check file existence
        id: check_files
        uses: andstor/file-existence-action@v3
        with:
          files: 'dist/jasonruesch/'

      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist/jasonruesch
        if: steps.check_files.outputs.files_exists == 'true'

  deploy:
    environment:
      name: staging
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: xSAVIKx/artifact-exists-action@v0
        id: check_artifact
        with:
          name: 'github-pages'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        if: steps.check_artifact.outputs.exists == 'true'
